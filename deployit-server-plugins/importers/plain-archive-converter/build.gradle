apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

group = 'com.xebialabs.deployit.community'
apiVersion = '3.7.0'
cliVersion = '3.7.0'
version = "${apiVersion}-1"
metaInfServicesVersion = '1.1'
trueZipVersion = '7.3.4'

sourceCompatibility = 1.6
sourceEncoding = 'UTF-8'

dependencies {
	compile("com.xebialabs.deployit:cli:${cliVersion}") {
    	exclude group: 'com.google.collections', module: 'google-collections'
    	exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
  	}
	compile "com.google.guava:guava:10.0.1"
	compile "de.schlichtherle.truezip:truezip-file:${trueZipVersion}"
  	compile "de.schlichtherle.truezip:truezip-driver-zip:${trueZipVersion}"
  	compile "org.kohsuke.metainf-services:metainf-services:${metaInfServicesVersion}"
	compile 'commons-io:commons-io:1.4'
	compile 'commons-lang:commons-lang:2.5'
  	compile 'com.google.code.findbugs:jsr305:1.3.9'

	testCompile 'junit:junit:4.8.2'
	testCompile 'com.qrmedia.commons:commons-lang:1.0.2'
}

repositories {
  mavenLocal()
  if (!rootProject.hasProperty('offline')) {
    mavenCentral()
    maven {
      credentials {
        username nexusUserName
        password nexusPassword
      }
      url "${nexusBaseUrl}/repositories/releases"
    }
  }
}

afterEvaluate { eachProject ->
  Set testTasks = eachProject.tasks.withType(Test)
  
  testTasks.each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}

task generatePom << {
  pom {
    project { 
      build { 
        plugins {
          plugin {
            artifactId 'maven-compiler-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding 
              source = "${sourceCompatibility}".toString()
              target = "${sourceCompatibility}".toString()
            }
          }
          plugin {
            artifactId 'maven-resources-plugin'
            version '2.3'
            configuration {
              encoding = sourceEncoding
            }
          }
        }
      }
    }
  }.writeTo('pom.xml')
}

task jarWithDeps(type: Jar, dependsOn: classes) {
	archiveName = "${baseName}.${extension}"
	mergeDir = "${buildDir}/merge"
	truezipSpiFile = 'META-INF/services/de.schlichtherle.truezip.fs.spi.FsDriverService'
	// no inheritance from other projects so no need to be lazy here
	runtimeDeps = configurations.runtime.findAll({ !optionalDep(it.name) }).collect { zipTree(it) }
	outputClasses = sourceSets.main.output.classesDir
  
	doFirst {
		new File(mergeDir).delete()
		mergeFiles(mergeDir, outputClasses.collect({ fileTree(it) }) + runtimeDeps, truezipSpiFile)
	}

	// this project's classes and all deps
	from(outputClasses) {
		exclude truezipSpiFile
	}
	from(runtimeDeps) {
		exclude 'META-INF/*'
		exclude truezipSpiFile
	}
	from mergeDir
}

private boolean optionalDep(String dep) {
	// could be more rigorous here...
	dep.startsWith("metainf-services-${metaInfServicesVersion}")
}

private def mergeFiles(targetDir, fileTrees, relativePath) {
	// prepare the merge
	mergedFile = new File("${targetDir}/${relativePath}")
	new File(mergedFile.parent).mkdirs()

	fileTrees*.matching({ include "**/${relativePath}" })*.each {
		mergedFile << it.bytes
	}
}

afterEvaluate { eachProject ->
  eachProject.tasks.withType(Test).each { testTask ->
    testTask.onlyIf { !project.hasProperty('skipTests') }
    testTask.afterSuite { descriptor, result ->
      if (descriptor.className != null) {
        println "${descriptor.className}: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      } else if (descriptor.className == null && descriptor.parent == null) {
        println "Total: ${result.testCount} tests; failed: ${result.failedTestCount}; skipped: ${result.skippedTestCount}"
      }
    }
  }
}


// see http://gradle.1045684.n5.nabble.com/Classloader-issues-in-my-pom-configuration-td4576879.html
private def newDeploymentRepository(model) {
  return model.getClass().getClassLoader().loadClass("org.apache.maven.model.DeploymentRepository").newInstance()
}
